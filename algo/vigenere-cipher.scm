(define (find-index eq? x seq)
  (let loop ((i 0) (seq seq))
    (cond ((null? seq) false)
          ((eq? x (car seq)) i)
          (else (loop (inc i) (cdr seq))))))

(define (find-by-index i seq)
  (let loop ((i i) (seq seq))
    (if (zero? i)
      (car seq)
      (loop (dec i) (cdr seq)))))

(define (make-coder key abc)
  (let ((key (string->list key))
        (abc (string->list abc))
        (find-index (lambda (x seq) (find-index char=? x seq))))
    (define (normalize-index index)
      (cond ((negative? index) (+ index (length abc)))
            ((>= index (length abc)) (- index (length abc)))
            (else index)))
    (lambda (direction input)
      (define (in-abc input-index offset)
        (let ((out-index
               (normalize-index (+ input-index (* direction offset)))))
          (find-by-index out-index abc)))
      (let loop ((input (string->list input))
                 (key* key)
                 (result '()))
        (if (null? input)
          (list->string (reverse result))
          (let ((next (lambda (c)
                        (loop (cdr input)
                              (if (null? (cdr key*)) key (cdr key*))
                              (cons c result))))
                (input-char (car input))
                (key-char (car key*)))
            (let ((input-abc-index (find-index input-char abc)))
              (if (false? input-abc-index)
                (next input-char)
                (let ((offset (find-index key-char abc)))
                  (next (in-abc input-abc-index offset)))))))))))

(define (encode coder input)
  (coder +1 input))

(define (decode coder input)
  (coder -1 input))

(define key "password")
(define abc "abcdefghijklmnopqrstuvwxyz")
(define coder (make-coder key abc))

(print (encode coder "hello world"))
(print (decode coder (encode coder "hello world")))
